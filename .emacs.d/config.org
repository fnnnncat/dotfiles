#+STARTUP: overview

* 基础配置

  #+BEGIN_SRC emacs-lisp
    ;; lisp编译器
    (setq inferior-lisp-program "/usr/local/bin/sbcl")

    (unless window-system
      (global-set-key [mouse-4] 'scroll-down-line)
      (global-set-key [mouse-5] 'scroll-up-line))

    ;; x模式下支持复制到剪贴板功能
    (setq x-select-enable-clipboard t)

    ;; 显示光标所在区域的两边的括号
    (show-paren-mode 1)
    (setq show-paren-style 'expression)

    ;; 修改光标类型
    (setq-default cursor-type 'bar)

    ;; 设置默认字体
    (set-face-attribute 'default nil
                        :family "Source Code Pro for Powerline"
                        :height 180
                        :weight 'normal
                        :width 'normal)
    (setq org-src-fontify-natively t)

    ;; 自动加载外部修改过的文件
    (global-auto-revert-mode 1)

    ;; 支持鼠标模式
    (xterm-mouse-mode 1)

    ;; 禁止tab
    (setq-default indent-tabs-mode nil)

    ;; 设置缩进
    (setq tab-width 2)

    ;; 关闭自己生产的保存的文件
    (setq auto-save-default nil)
    ;; 隐藏工具栏

    (if window-system
        (tool-bar-mode -1))
    ;; 隐藏滚动条
    (if window-system
        (scroll-bar-mode -1))

    ;; 智能缩进
    (electric-indent-mode t)

    ;; 显示行号
    (global-linum-mode t)

    ;; 禁用开启时的不可描述
    (setq inhibit-splash-screen t)

    ;; 禁止备份文件
    (setq make-backup-files nil)

    ;; 直接替换所选区块的文本，而不是在后面追加
    (delete-selection-mode t)

    ;; 开启自动全屏
    (setq initial-frame-alist (quote ((fullscreen . maximized))))

    ;; 当前行高亮
    (global-hl-line-mode t)

    ;; 禁止bibibibibibi
    (setq ring-bell-function 'ignore)

    ;; 读写文件编码设置
    (prefer-coding-system 'utf-8)
    (setq buffer-file-coding-system 'utf-8)

    ;; 使用y或者n 而不是 yes或者no
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; 使用一个比较大的kill-ring来存储我删掉的东西
    (setq kill-ring-max 500)

    ;; 可以直接打开显示图片
    (auto-image-file-mode)

    ;; 标题栏显示buffer名
    (setq frame-title-format "emacs@%b")
  #+END_SRC


* 自定义函数


** 重新缩进当前选中区域或整个BUFFER
    #+BEGIN_SRC emacs-lisp
     (defun indent-buffer()
       (interactive)
       (indent-region (point-min) (point-max)))
     (defun indent-region-or-buffer()
       (interactive)
       (save-excursion
         (if (region-active-p)
             (progn
               (indent-region (region-beginning) (region-end))
               (message "Indent selected region."))
           (progn
             (indent-buffer)
             (message "Indent buffer.")))))

     (global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)
    #+END_SRC


** ORGMODE插入代码块
    #+BEGIN_SRC emacs-lisp
    (defun org-insert-src-block (src-code-type)
      "插入一个`SRC-CODE-TYPE'类型的代码块"
      (interactive
       (let ((src-code-types
              '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
                "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
                "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
                "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
                "scheme" "sqlite")))
         (list (ido-completing-read "Source code type: " src-code-types))))
      (progn
        (newline-and-indent)
        (insert (format "#+BEGIN_SRC %s\n" src-code-type))
        (newline-and-indent)
        (insert "#+END_SRC\n")
        (previous-line 2)
        (org-edit-src-code)))
    #+END_SRC


** 在上／下行创建新行
    #+BEGIN_SRC emacs-lisp
     (defun insert-new-line-top()
       (interactive)
       (move-beginning-of-line 1)
       (open-line 1))

     (defun insert-new-line-bottom()
       (interactive)
       (move-end-of-line 1)
       (newline))

     (global-set-key (kbd "C-c i n") 'insert-new-line-bottom)
     (global-set-key (kbd "C-c i p") 'insert-new-line-top)
    #+END_SRC


** 移动当前行到上／下行
    #+BEGIN_SRC emacs-lisp
      (defun move-text-internal (arg)
        "ARG 移动当前行."
        (cond
          ((and mark-active transient-mark-mode)
           (if (> (point) (mark))
             (exchange-point-and-mark))
           (let ((column (current-column))
                 (text (delete-and-extract-region (point) (mark))))
             (forward-line arg)
             (move-to-column column t)
             (set-mark (point))
             (insert text)
             (exchange-point-and-mark)
             (setq deactivate-mark nil)))
          (t
            (let ((column (current-column)))
              (beginning-of-line)
              (when (or (> arg 0) (not (bobp)))
                (forward-line)
                (when (or (< arg 0) (not (eobp)))
                  (transpose-lines arg))
                (forward-line -1))
              (move-to-column column t)))))

      (defun move-text-down (arg)
        "ARG 移动当前行到到下一行."
        (interactive "*p")
        (move-text-internal arg))
      (defun move-text-up (arg)
        "ARG 移动当前行到到上一行."
        (interactive "*p")
        (move-text-internal (- arg)))

      (global-set-key (kbd "C-c m p") 'move-text-up)
      (global-set-key (kbd "C-c m n") 'move-text-down)
    #+END_SRC


** KILL-LINE-OR-REGION

    #+BEGIN_SRC emacs-lisp
      (defun kill-line-or-region(&optional arg)
        "根据不同情况删除一行或者选区"
        (interactive "P")
        (if mark-active
            (if (= (region-beginning) (region-end))
                (kill-line arg)
              (kill-region (region-beginning) (region-end))))
        (kill-line arg))

      (global-set-key (kbd "C-k") 'kill-line-or-region)
    #+END_SRC


* 常用插件


** ORG-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t
        :hook
        (org-mode . (lambda ()
                      (org-bullets-mode 1)
                      (linum-mode 0))))
    #+END_SRC


** DRACULA-THEME

    #+BEGIN_SRC emacs-lisp
      (if window-system
          (use-package dracula-theme
            :ensure t
            :init
            (load-theme 'dracula t)))
    #+END_SRC


** EXEC-PATH-FROM-SHELL

    #+BEGIN_SRC emacs-lisp
      (use-package exec-path-from-shell
        :ensure t
        :config
        (when (memq window-system '(mac ns x))
          (exec-path-from-shell-initialize)))
    #+END_SRC


** WITCH-KEY

    #+BEGIN_SRC emacs-lisp
      (use-package which-key
        :ensure t
        :config
        (which-key-mode)
        (which-key-setup-side-window-bottom))
    #+END_SRC


** ACE-WINDOW

    #+BEGIN_SRC emacs-lisp
      (use-package ace-window
        :ensure t
        :init
        (progn
          (global-set-key [remap other-window] 'ace-window)
          (custom-set-faces
           '(aw-leading-char-face
             ((t (:inherit ace-jump-face-foreground :height 3.0)))))
          ))
    #+END_SRC


** TRY

    #+BEGIN_SRC emacs-lisp
      (use-package try
        :ensure t)
    #+END_SRC


** HELM

    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :bind
        ("M-x" . helm-M-x)
        ("C-x C-r" . helm-recentf)
        ("C-x C-f" . helm-find-files)
        ("C-x C-b" . helm-buffers-list))

      (use-package helm-ag
        :ensure t
        :after helm)

      (use-package helm-projectile
        :ensure t
        :after helm
        :init
        (projectile-global-mode)
        (helm-projectile-on)
        :bind
        ("C-c p h" . helm-projectile)
        ("C-c p p" . helm-projectile-switch-projectconfig)
        ("C-c p f" . helm-projectile-find-file)
        ("C-c p F" . helm-projectile-find-file-in-known-projects)
        ("C-c p g" . helm-projectile-find-file-dwim)
        ("C-c p d" . helm-projectile-find-dir)
        ("C-c p e" . helm-projectile-recentf)
        ("C-c p a" . helm-projectile-find-other-file)
        ("C-c p i" . helm-projectile-invalidate-cache)
        ("C-c p z" . helm-projectile-cache-current-file)
        ("C-c p b" . helm-projectile-switch-to-buffer)
        ("C-c p s g" . helm-projectile-grep)
        ("C-c p s a" . helm-projectile-ack)
        ("C-c p s s" . helm-projectile-ag))

      (use-package helm-themes
        :ensure t)
    #+END_SRC


** SWIPER

    #+BEGIN_SRC emacs-lisp
      (use-package swiper
        :ensure t
        :bind
        ("C-s" . swiper))
    #+END_SRC


** COMPANY

    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :init
        (add-hook 'after-init-hook 'global-company-mode)
        (setq
         company-minimum-prefix-length 1
         company-show-numbers t
         company-dabbrev-downcase t
         company-idle-delay 0)
        (add-hook 'eshell-mode-hook
                  (lambda ()
                    (setq-local company-idle-delay nil)
                    (linum-mode 0)))
        :config
        (define-key company-active-map (kbd "M-n") nil)
        (define-key company-active-map (kbd "M-p") nil)
        (define-key company-active-map (kbd "C-n") 'company-select-next)
        (define-key company-active-map (kbd "C-p") 'company-select-previous))

      (use-package company-go
        :ensure t
        :init
        (with-eval-after-load 'company
          (add-to-list 'company-backends 'company-go)))
    #+END_SRC


** UNDO-TREE

    #+BEGIN_SRC emacs-lisp
      (use-package undo-tree
        :ensure t
        :init
        (global-undo-tree-mode))
    #+END_SRC


** SMART-HUNGRY-DELETE

    #+BEGIN_SRC emacs-lisp
      (defun smart-hungry-delete-region-code(&optional arg)
        "根据不同情况删除后面一个字符或者选区"
        (interactive "P")
        (if mark-active
            (if (= (region-beginning) (region-end))
                (smart-hungry-delete-forward-char arg)
              (kill-region (region-beginning) (region-end)))
          (smart-hungry-delete-forward-char arg)))

      (use-package smart-hungry-delete
        :ensure t
        :bind
        ("<backspace>" . smart-hungry-delete-backward-char)
        ("C-d" . smart-hungry-delete-region-code)
        :config
        (smart-hungry-delete-add-default-hooks))
    #+END_SRC

    #+RESULTS:
    : smart-hungry-delete-region-code


** EXPAND-REGION

    #+BEGIN_SRC emacs-lisp
      (use-package expand-region
        :ensure t
        :bind
        ("C-c e r e" . er/expand-region)
        ("C-c e r w" . er/mark-word)
        ("C-c e r d" . er/mark-defun)
        ("C-c e r c" . er/mark-comment)
        ("C-c e r q" . er/mark-outside-quotes)
        ("C-c e r p" . er/mark-outside-pairs)
        ("C-c e r s" . er/mark-symbol)
        ("C-c e r S" . er/mark-symbol-with-prefix)
        ("C-c e r n" . er/mark-next-accessor)
        ("C-c e r h" . er/mark-html-attribute))
    #+END_SRC


** MULTIPLE-CURSORS

    #+BEGIN_SRC emacs-lisp
      (use-package region-bindings-mode
        :ensure t
        :config
        (region-bindings-mode-enable))

      (use-package multiple-cursors
        :ensure t
        :config
        (define-key region-bindings-mode-map "a" 'mc/mark-all-like-this)
        (define-key region-bindings-mode-map "p" 'mc/mark-previous-like-this)
        (define-key region-bindings-mode-map "n" 'mc/mark-next-like-this)
        (define-key region-bindings-mode-map "k" 'mc/skip-to-preview-like-this)
        (define-key region-bindings-mode-map "j" 'mc/skip-to-next-like-this)
        (global-set-key (kbd "C-c m c t") 'mc/mark-sgml-tag-pair)
        (global-set-key (kbd "C-c m c n") 'mc/mark-next-lines)
        (global-set-key (kbd "C-c m c r") 'mc/repeat-command))
    #+END_SRC


** JS2-MODE
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("\\.es6\\'" . js2-mode))
        (setq js2-mode-show-parse-errors nil)
        (setq js2-mode-show-strict-warnings nil)
        (setq forward-sexp-function nil))
    #+END_SRC


** RJSX-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package rjsx-mode
        :ensure t
        :init
        (setq js-switch-indent-offset 2)
        :config
        (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode)
        (with-eval-after-load 'rjsx-mode
          (define-key rjsx-mode-map "<" nil)
          (define-key rjsx-mode-map (kbd "C-d") nil)
          (define-key rjsx-mode-map ">" nil))))
    #+END_SRC


** EMMET-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode
        :ensure t
        :config
        (setq emmet-move-cursor-between-quotes t)
        (setq emmet-self-closing-tag-style " /")
        (add-hook 'rjsx-mode 'emmet-mode)
        (add-hook 'web-mode-hook 'emmet-mode)
        (add-hook 'js2-mode 'emmet-mode)
        (add-hook 'js2-jsx-mode 'emmet-mode)
        (add-hook 'css-mode-hook  'emmet-mode)
        (add-hook 'emmet-mode-hook (lambda () (setq emmet-indent-after-insert t)))
        (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2))))
    #+END_SRC


** WEB-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
        (setq web-mode-enable-auto-pairing nil)
        (setq web-mode-enable-auto-closing t)
        (setq web-mode-enable-css-colorization t)
        (setq web-mode-enable-current-column-highlight t)
        (setq web-mode-enable-current-element-highlight t)
        (setq web-mode-enable-auto-quoting nil)
        (setq web-mode-commet-style 2)
        (setq web-mode-markup-indent-offset 2)
        (setq web-mode-css-indent-offset 2)
        (setq web-mode-code-indent-offset 2)
        (setq web-mode-script-padding 2)
        (setq web-mode-attr-indent-offset 2)
        (setq web-mode-enable-css-colorization t))
    #+END_SRC


** DUMB-JUMP

    #+BEGIN_SRC emacs-lisp
      (use-package dumb-jump
        :ensure t
        :init
        (dumb-jump-mode)
        :bind
        ("M-g o" . dumb-jump-go-other-window)
        ("M-g j" . dumb-jump-go)
        ("M-g i" . dumb-jump-go-prompt)
        ("M-g x" . dumb-jump-go-prefer-external)
        ("M-g z" . dumb-jump-go-prefer-external-other-window)
        ("M-g q" . dumb-jump-quick-look)
        :config
        (setq dumb-jump-selector 'helm)
        (setq dumb-jump-force-searcher 'ag))
    #+END_SRC


** EDITORCONFIG

    #+BEGIN_SRC emacs-lisp
      (use-package editorconfig
        :ensure t
        :config
        (editorconfig-mode 1))
    #+END_SRC


** GIT-GUTTER

    #+BEGIN_SRC emacs-lisp
      (use-package git-gutter
        :ensure t
        :config
        (global-git-gutter-mode t))
    #+END_SRC


** MAGIT

    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :ensure t)
    #+END_SRC


** POWERLINE

    #+BEGIN_SRC emacs-lisp
      (use-package powerline
        :ensure t
        :config
        (powerline-center-theme))
    #+END_SRC


** TYPESCRIPT

    #+BEGIN_SRC emacs-lisp
      (use-package typescript-mode
        :ensure t
        :config
        (setq js-switch-indent-offset 2))

      (use-package tide
        :ensure t
        :config
        (setq company-tooltip-align-annotations t)
        :hook
        (before-save . tide-format-before-save)
        (typescript-mode . setup-tide-mode)
        (web-mode . (lambda()
                      (when (string-equal "tsx" (file-name-extension buffer-file-name))
                        (setup-tide-mode)
                        (setq emmet-expand-jsx-className? t)))))

      (defun setup-tide-mode ()
        (interactive)
        (tide-setup)
        (flycheck-mode +1)
        (setq flycheck-check-syntax-automatically '(save mode-enabled))
        (eldoc-mode +1)
        (tide-hl-identifier-mode +1))
    #+END_SRC


** FLYCHECK

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t
        :init
        (add-hook 'after-init-hook #'global-flycheck-mode))

      (use-package flycheck-pos-tip
        :ensure t
        :config
        (with-eval-after-load 'flycheck (flycheck-pos-tip-mode)))
    #+END_SRC


** NERDTREE

    #+BEGIN_SRC emacs-lisp
      (use-package neotree
        :ensure t
        :config
        (setq neo-smart-open t))
    #+END_SRC


** SMART-PARENS

    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
        :ensure t
        :config
        (smartparens-global-mode)
        (sp-local-pair '(emacs-lisp-mode) "'" "'" :actions nil)
        (sp-local-pair '(lisp-mode) "'" "'" :actions nil))
    #+END_SRC


** JSON-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package json-mode
        :ensure t)
    #+END_SRC


** GO-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package go-mode
        :ensure t
        :init
        (setenv "GOROOT" "/usr/local/Cellar/go/1.9.2/libexec")
        (setenv "GOPATH" "/Users/leeyunfan/workspace/code/go")
        (progn
          (setq gofmt-command "goimports")
          (add-hook 'before-save-hook 'gofmt-before-save))
        :config
        (setq tab-width 2)
        (setq indent-tabs-mode 1))

      (use-package go-eldoc
        :ensure t
        :config
        (add-hook 'go-mode-hook 'go-eldoc-setup))

      (use-package flymake-go
        :ensure t
        :config
        (add-hook 'flymake-mode-hook
                  (lambda()
                    (local-set-key (kbd "C-c C-e n") 'flymake-goto-next-error)))
        (add-hook 'flymake-mode-hook
                  (lambda()
                    (local-set-key (kbd "C-c C-e p") 'flymake-goto-prev-error)))
        (add-hook 'flymake-mode-hook
                  (lambda()
                    (local-set-key (kbd "C-c C-e m") 'flymake-popup-current-error-menu))))
    #+END_SRC


** MARKDOWN-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :ensure t
        :commands (markdown-mode gfm-mode)
        :mode
        ("README\\.md\\'" . gfm-mode)
        ("\\.md\\'" . markdown-mode)
        ("\\.markdown\\'" . markdown-mode)
        :init
        (setq markdown-command "multimarkdown")
        :config
        (autoload 'markdown-mode "markdown-mode"
          "Major mode for editing Markdown files" t)
        (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
        (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

        (autoload 'gfm-mode "markdown-mode"
          "Major mode for editing GitHub Flavored Markdown files" t)
        (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode)))
    #+END_SRC


** WGREP

    #+BEGIN_SRC emacs-lisp
      (use-package wgrep
        :ensure t)
    #+END_SRC


** EVIL-NERD-COMMENTER

    #+BEGIN_SRC emacs-lisp
      (use-package evil-nerd-commenter
        :ensure t
        :config
        (global-set-key (kbd "M-;") 'evilnc-comment-or-uncomment-lines))
    #+END_SRC


** OSX-CLIPBOARD

    #+BEGIN_SRC emacs-lisp
      (use-package osx-clipboard
        :ensure t
        :config
        (osx-clipboard-mode +1))
    #+END_SRC


** SLIME

    #+BEGIN_SRC emacs-lisp
      (use-package slime
        :ensure t
        :config
        (setq inferior-lisp-program "/usr/local/bin/sbcl")
        (setq slime-contribs '(slime-fancy)))
    #+END_SRC


** ELPY

    #+BEGIN_SRC emacs-lisp
      (use-package elpy
        :ensure t
        :config
        (elpy-enable))
    #+END_SRC


** ORIGAMI

    #+BEGIN_SRC emacs-lisp
      (use-package origami
        :ensure t
        :bind (("C-c l" . origami-toggle-node)
               ("C-c C-l" . origami-toggle-all-nodes))
        :config
        (global-origami-mode))
    #+END_SRC


** LUA-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package lua-mode
        :ensure t
        :config
        (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
        (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
        (add-to-list 'interpreter-mode-alist '("lua" . lua-mode)))
    #+END_SRC


** VISUAL-REGEXP

    #+BEGIN_SRC emacs-lisp
      (use-package visual-regexp
        :ensure t)

    #+END_SRC


** RAINBOW-DELIMITERS

    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
        :ensure t
        :config
        (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+END_SRC


** BROWSE-KILL-RIGN

		#+BEGIN_SRC emacs-lisp
      (use-package browse-kill-ring
        :ensure t
        :bind
        ("C-c b k r" . browse-kill-ring))
		#+END_SRC
