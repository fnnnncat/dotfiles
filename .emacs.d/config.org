
#+STARTUP: overview

* 常用插件

** ORG-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t
        :hook
        (org-mode . (lambda ()
                      (org-bullets-mode 1)
                      (linum-mode 0))))
    #+END_SRC


** HELM

    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure t
        :bind
        ("M-x" . helm-M-x)
        ("C-x C-r" . helm-recentf)
        ("C-x C-f" . helm-find-files)
        ("C-x C-b" . helm-buffers-list))

      (use-package helm-ag
        :ensure t
        :after helm)

      (use-package helm-projectile
        :ensure t
        :after helm
        :init
        (projectile-global-mode)
        (helm-projectile-on)
        :bind
        ("C-c p h" . helm-projectile)
        ("C-c p p" . helm-projectile-switch-projectconfig)
        ("C-c p f" . helm-projectile-find-file)
        ("C-c p F" . helm-projectile-find-file-in-known-projects)
        ("C-c p g" . helm-projectile-find-file-dwim)
        ("C-c p d" . helm-projectile-find-dir)
        ("C-c p e" . helm-projectile-recentf)
        ("C-c p a" . helm-projectile-find-other-file)
        ("C-c p i" . helm-projectile-invalidate-cache)
        ("C-c p z" . helm-projectile-cache-current-file)
        ("C-c p b" . helm-projectile-switch-to-buffer)
        ("C-c p s g" . helm-projectile-grep)
        ("C-c p s a" . helm-projectile-ack)
        ("C-c p s s" . helm-projectile-ag))

      (use-package helm-themes
        :ensure t)

    #+END_SRC


** VISUAL-REGEXP

    #+BEGIN_SRC emacs-lisp
      (use-package visual-regexp
        :ensure t)
    #+END_SRC

* 美化样式

** POWERLINE

    #+BEGIN_SRC emacs-lisp
     
    #+END_SRC


* 语言支持

** COMPANY

    #+BEGIN_SRC emacs-lisp
    
    #+END_SRC
   

** SLIME

    #+BEGIN_SRC emacs-lisp
      (use-package slime
        :ensure t
        :config
        (setq inferior-lisp-program "/usr/local/bin/sbcl")
        (setq slime-contribs '(slime-fancy)))
    #+END_SRC


** EMMET-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode
        :ensure t
        :config
        (setq emmet-move-cursor-between-quotes t)
        (setq emmet-self-closing-tag-style " /")
        (add-hook 'rjsx-mode 'emmet-mode)
        (add-hook 'web-mode-hook 'emmet-mode)
        (add-hook 'js2-mode 'emmet-mode)
        (add-hook 'js2-jsx-mode 'emmet-mode)
        (add-hook 'css-mode-hook  'emmet-mode)
        (add-hook 'emmet-mode-hook (lambda () (setq emmet-indent-after-insert t)))
        (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2))))
    #+END_SRC


** WEB-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.tpl\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
        (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
        (setq web-mode-enable-auto-pairing nil)
        (setq web-mode-enable-auto-closing t)
        (setq web-mode-enable-css-colorization t)
        (setq web-mode-enable-current-column-highlight t)
        (setq web-mode-enable-current-element-highlight t)
        (setq web-mode-enable-auto-quoting nil)
        (setq web-mode-commet-style 2)
        (setq web-mode-markup-indent-offset 2)
        (setq web-mode-css-indent-offset 2)
        (setq web-mode-code-indent-offset 2)
        (setq web-mode-script-padding 2)
        (setq web-mode-attr-indent-offset 2)
        (setq web-mode-enable-css-colorization t))
    #+END_SRC



    #+BEGIN_SRC emacs-lisp
      (use-package php-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode)))
    #+END_SRC


** TYPESCRIPT

    #+BEGIN_SRC emacs-lisp
      (use-package typescript-mode
        :ensure t
        :config
        (setq js-switch-indent-offset 2))

      (use-package tide
        :ensure t
        :config
        (setq company-tooltip-align-annotations t)
        :hook
        (before-save . tide-format-before-save)
        (typescript-mode . setup-tide-mode)
        (web-mode . (lambda()
                      (when (string-equal "tsx" (file-name-extension buffer-file-name))
                        (setup-tide-mode)
                        (setq emmet-expand-jsx-className? t)))))

      (defun setup-tide-mode ()
        (interactive)
        (tide-setup)
        (flycheck-mode +1)
        (setq flycheck-check-syntax-automatically '(save mode-enabled))
        (eldoc-mode +1)
        (tide-hl-identifier-mode +1))
    #+END_SRC


** JSON-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package json-mode
        :ensure t)
    #+END_SRC


** MARKDOWN-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :ensure t
        :commands (markdown-mode gfm-mode)
        :mode
        ("README\\.md\\'" . gfm-mode)
        ("\\.md\\'" . markdown-mode)
        ("\\.markdown\\'" . markdown-mode)
        :init
        (setq markdown-command "multimarkdown")
        :config
        (autoload 'markdown-mode "markdown-mode"
          "Major mode for editing Markdown files" t)
        (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
        (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

        (autoload 'gfm-mode "markdown-mode"
          "Major mode for editing GitHub Flavored Markdown files" t)
        (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode)))
    #+END_SRC


** JS2-MODE
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t
        :config
        (add-to-list 'auto-mode-alist '("\\.es6\\'" . js2-mode))
        (setq js2-mode-show-parse-errors nil)
        (setq js2-mode-show-strict-warnings nil)
        (setq forward-sexp-function nil))
    #+END_SRC


** RJSX-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package rjsx-mode
        :ensure t
        :init
        (setq js-switch-indent-offset 2)
        :config
        (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode)
        (with-eval-after-load 'rjsx-mode
          (define-key rjsx-mode-map "<" nil)
          (define-key rjsx-mode-map (kbd "C-d") nil)
          (define-key rjsx-mode-map ">" nil))))
    #+END_SRC


** GO-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package go-mode
        :ensure t
        :init
        (setenv "GO15VENDOREXPERIMENT" "1")
        (setenv "GOROOT" (exec-path-from-shell-getenv "GOROOT"))
        (setenv "GOPATH" (exec-path-from-shell-getenv "GOPATH"))
        (progn
          (setq gofmt-command "goimports")
          (add-hook 'before-save-hook 'gofmt-before-save))
        :config
        (setq tab-width 2)
        (setq indent-tabs-mode 1))

      (use-package go-eldoc
        :ensure t
        :config
        (add-hook 'go-mode-hook 'go-eldoc-setup))

      (use-package flymake-go
        :ensure t
        :config
        (add-hook 'flymake-mode-hook
                  (lambda()
                    (local-set-key (kbd "C-c C-e n") 'flymake-goto-next-error)))
        (add-hook 'flymake-mode-hook
                  (lambda()
                    (local-set-key (kbd "C-c C-e p") 'flymake-goto-prev-error)))
        (add-hook 'flymake-mode-hook
                  (lambda()
                    (local-set-key (kbd "C-c C-e m") 'flymake-popup-current-error-menu))))

      (use-package go-add-tags
        :ensure t)

      (use-package popwin
        :ensure t
        :init
        (setq display-buffer-function 'popwin:display-buffer)
        :config
        (push '("^\*go-direx:" :regexp t :position right :width 0.4 :dedicated t :stick t)
              popwin:special-display-config))

      (use-package go-direx
        :ensure t)
    #+END_SRC


** PROTOBUF-MODE

    #+BEGIN_SRC emacs-lisp
      (use-package protobuf-mode
        :ensure t
        :config
        (setq auto-mode-alist  (cons '(".proto$" . protobuf-mode) auto-mode-alist)))
    #+END_SRC
